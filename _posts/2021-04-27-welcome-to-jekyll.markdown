---
layout: post
title:  "HTTPS (TLS) 이해하기"
date:   2021-05-23 14:00:00 +0900
categories: security
tage: [http, https, tls, ssl, ca, 인증서] 
---

HTTPS에 대한 이해를 돕고자 작성

## 1. HTTP vs HTTPS 
-----
- HTTP란 네트워크 상에서 HyperText를 (HTML)을 전송 시키기 위해 사용되는 프로토콜 이다.  

- HTTPS란 보안이 강화된 HTTP 란 뜻이다. HTTP는 암호호 되지 않은 방법으로 데이터를 전송하기 때문에 서버와 클라이언트
가 주고 받는 메세지를 감청 하기 매우 쉽다. 이를 TLS(SSL) 프로토콜을 사용하여 안전한 데이터 전송을 도와준다. 

- OSI 7계층 에서의  HTTP, SSL
![OSI 7계층](/assets/img/osi_7layer.png)

<br>

## 2. TLS (Transport Layer Security) 란?
----- 
- 네트워크를 통하여 데이터를 전송(송수신) 하고자 할때 보안을 한층 강화 시킨 레이어 이다.

<br>

## 3. SSL 디지털 인증서
-----
- 클라이언트와 서버 간의 통신을 제3자(CA)가 보장해주는 전자화된 문서이다. 클라이언트가 서버에 접속한 직후 클라이언트에게 
전달되며, 클라이언트는 이 인증서 정보가 신뢰할 수 있는 인증서인지 검증 한 후 다음 절차를 수행하게 된다.

<br>

## 4. SSL에 사용되는 암호화의 종류 
-----
- SSL은 보안과 성능상의 이유로 2종류의 암호화를 사용한다.  
<br>

### 4.1. 대칭키 
- 대칭키는 동일한 키(key)로 암복호화를 같이 할 수 있는 암호화 기법을 이야기 한다. 

- **암복호화시 성능상의 이점이 존재 하지만 서로 같은 키를 사용하기 위해 상대방에서 안전하게 전달 되어야 한다.**

![대칭키](/assets/img/crypto_symmetric_key.jpg)

### 4.2. 공개키 
- 공개키 방식은 두개의 키를 갖게 되는데 A키로 암호화를 하면 B키로 복호화를 할 수 있고, B키로 암호화를 하면 A키로 복
호화를 할 수 있는 방식이다.

- 이 두개의 키를 각각 **공개키(Public Key), 비밀키(Private Key)** 라고 한다. **비공개 키의 경우 자신만 가지고 있고,
공개키는 타인에게 제공**한다. 공개키를 가지고 있는 사람의 경우 **공개키로 데이터를 암호화 하여 비공개키를 가지고 있는 사람에게
데이터를 전달** 한다. 비공개키의 소유자는 **비공캐 키를 이용해 암호화된 정보를 복호화** 한다. 

- **보안이 우수하지만 암복호화시 성능이 떨어진다는 단점이 있다.** 

![공개키](/assets/img/crypto_symmetric_key.jpg)

<br>

## 5. SSL 인증서
-----
### 5.1. 인증서 역할 
  - 클라이언트가 접속한 서버가 **신뢰** 할 수 있는 서버임을 보장한다.
  
  - SSL 통신에 사용할 **공개키**를 클라이언트에게 제공한다.
  
### 5.2. CA 
  - 클라이언트가 접속한 서버가 클라이언트가 의도한 서버가 맞는지 인증서를 통하여 보증해야 하는데 이를 보증하는 기관이나
  기업들을 **CA(Certificate authority)** 혹은 **Root Certificate** 라고 부른다.
  
  - SSL을 통해서 암호화된 통신을 제공하려는 서비스는 CA를 통해서 인증서를 구입 해야 한다. 
  
  ![브라우저 CA 정보](/assets/img/browser_ca_example.png){: width="300" height="400"}
  
### 5.3. SSL 인증서의 내용
  - SSL 인증서에는 다음과 같은 정보가 포한되어 있다.
    - 서비스의 정보 (인증서를 발급한 CA, 서비스의 도메인 등등)
    - **서버 측 공개키**
    
  - 위와 같은 내용은 CA에 의해서 암호화 된다. 이 때 사용하는 암호화 기법이 공개키 방식이다. CA는 자신의 CA 비공개키를
  이용해서 서버가 제출한 인증서를 암호화 하는 것이다.
  
  - 브라우저는 CA리스트를 내부적으로 포함하고 있다. 각각의 CA의 공개키를 브라우저는 이미 알고 있다.
    

### 5.4. SSL 인증서가 서비스를 보증하는 방법 (절차)

 1. 웹브라우저가 서버에 접속 할 때 서버는 제일 먼저 인증서를 제공한다. 
 
 2. 브라우저는 서버가 제공한 인증서를 자신이 가지고 있는 CA 리스트에서 존재하는지 확인한다.
 
 3. 브라우저는 미리 가지고 있던 CA의 공개키를 이용하여 인증서를 **복호화** 하게 된다.
 
 4. 성공적으로 복호화 되었다는 것은 검증된 CA로부터 검토를 통과 했다는 의미가 된다.(신뢰 할 수 있는 사이트 )

<br>
## 6. SSL의 동작 방법 
-----
- SSL은 암호화된 데이터를 전송하기 위해서 **공개키**와 **대칭키**를 혼합해서 사용한다.  
즉, 클라이언트와 서버가 주고 받는 **실제 정보**는 **대칭키 방식**으로 암호화 하고, 대칭키 방식으로 암호화된 실제 정보를 복호화 할때 사용할 **대칭키**는 **공개키 방식**으로 암호화 해서 
클라이언트와 서버가 주고 받는다. 

    - 실제 데이터 : **대칭키**
    - 대칭키의 키 : **공개키** 
- 네트워크를 이용하여 통신을 할 때는 내부적으로 3가지 단계가 있다.
    - 악수 -> 전송 -> 세션 종료 

  ![TLS 통신 순서](/assets/img/tls_cm_order.png)
  

### 6.1. 악수 ( handshake ) 
- 실제 데이터를 주고 받기 전에 어떤 방법으로 데이터를 주고 받을지 파악한다. 

    1. 클라이언트가 서버에 접속 한다. 이 단계를 **Client Hello** 라고 한다. 
        - **클라이언트 측에서 생성한 랜덤 데이터**
        - 클라이언트가 지원하는 암호화 방식들 
        - 세션 아이디 
    2. 서버는 Client Hello에 대한 응답으로 Server Hello를 하게 된다.
        - **서버 측에서 생성한 랜덤 데이터**
        - 서버가 선택한 클라이언트의 암호화 방식
        - **인증서** 
    3. 클라이언트는 서버의 인증서가 CA에 의해서 발급된 것인지 확인하고 복호화 한다. 
        - 2번을 통해서 받은 서버의 **랜덤 데이터**와 클라이언트가 생성한 랜덤 데이터를 조합해서 **pre master secret** 라는 키를 생성한다.
        - pre master secret 키 는 세션 단계에서 데이터를 주고 받을 쌔 암호화 하기 위해서 사용될 것이다. 
        - **복호화된 인증서의 공개키를 기반으로 pre master secret키를 암호화 해서 서버에게 전달한다.**
    4. 서버는 클라이언트가 전송한 pre master secret값을 자신의 비공개 키 로 **복호화** 한다. 
        - 이로서 서버와 클라이언트 모두 대칭키를 공유하게 되었고, master secret 값을 생성한 후 session key 값을 
        이용 해서 서버와 클라이언트는 데이터를 대칭키 방식으로 암호화 한 후에 주고 받는다. 
    5. 클라이언트와 서버는 핸드쉐이크 단계의 종료를 서로에게 알린다.

### 6.2. 세션 
- 실제로 서버와 클라이언트가 데이터를 주고 받는 단계이다. 데이터를 상대방에게 전송하기 전에 session key값을 이용해서
대칭키 방식으로 암호화 한다는 점이다. 암호화 된 정보는 상대방에게 전송될 것이고, 상대방도 세션키 값을 알고 있기 때문에 암호
를 복호화 할 수 있다.

- 공개키를 사용하면 되지 않을까 생각되지만 공개키 방식은 컴퓨터 파워를 많이 사용하기 때문에 서버는 큰비용을 지불해야 할 것이다.
반대로 대칭키는 암호를 푸는 열쇠인 대칭키를 상대에게 전송해야 하는데, 암호화가 되지 않은 인터넷을 통해서 키를 전송하는 것은 위험하기 때문이다.
그래서 속도는 느리지만 데이터를 안전하게 주고 받을 수 있는 공개키 방식으로 대칭키를 암호화 하고, 실제 데이터를 주고 받을 때는 대칭키를 
이용해서 데이터를 주고 받는 것이다.
- 성능 비교 : [AES vs RSA](https://github.com/okm1208/go-test-lab/blob/main/crypto/aes_rsa_benchmark_test.go)

### 6.3. 세션 종료
- 데이터 전송이 끝나면 SSL 통신이 끝났음을 서로에게 알려준다. 이 때 통신에서 사용한 대칭키인 세션키를 폐기한다.
